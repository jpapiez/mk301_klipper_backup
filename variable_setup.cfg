#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'gcode_macro _MENU_LIMITS' is in printer %} _MENU_LIMITS INDEX=4 {% endif %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_filament: {}
variable_unload_sd: False
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
  ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  ##### Endstops #####
  {% set user_z_endstop_xy = [142.0,300.0] %}    # Z endstop position                  from safe_z_home/home_xy_position
  {% set user_z_endstop_hop = 10.0 %}            # Z hop for moves (e.g., homing)      from safe_z_home/z_hop
  {% set user_z_home_current = 0.3 %}            # Reduced homing current for z        from zellneralex setting
  {% set user_home_accel = 1200 %}               # Reduced ACCEL for homing            from zellneralex setting
  {% set user_bed_y_offset = 5 %}                # Endstop offset to bed max y         from zellneralex setting   --where is this used?

  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 30 %}            ; default retract/extrude speed
  {% set user_travel_speed = 500 %}            ; travel speed e.g park, dock ...
  {% set user_filament_load_speed = 50 %}      ; load/unload speed

  ##### Park Position #####
  {% set user_park_xy_delta = 25 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]

  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 18 %}              ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 3 %}             ; retract/extrude distance while PAUSE or RESUME

  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 0 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]

  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 1 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 1 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 1 %}             ; Macro: _LAYER

  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}} %}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'load'    : (user_filament_load_speed * 60) %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True
